// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2021 14:56:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg m0;
reg m1;
reg m2;
reg m3;
reg s0;
reg s1;
// wires                                               
wire f;

// assign statements (if any)                          
Test i1 (
// port map - connection between master ports and signals/registers   
	.f(f),
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.s0(s0),
	.s1(s1)
);
initial 
begin 
#1000000 $finish;
end 

// m0
initial
begin
	m0 = 1'b1;
	m0 = #50000 1'b0;
	m0 = #30000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #60000 1'b0;
	m0 = #10000 1'b1;
	m0 = #20000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #70000 1'b1;
	m0 = #20000 1'b0;
	m0 = #10000 1'b1;
	m0 = #30000 1'b0;
	m0 = #30000 1'b1;
	m0 = #20000 1'b0;
	m0 = #20000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #30000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #40000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #20000 1'b0;
	m0 = #10000 1'b1;
	m0 = #20000 1'b0;
	m0 = #20000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #30000 1'b0;
	m0 = #10000 1'b1;
	m0 = #20000 1'b0;
	m0 = #10000 1'b1;
	m0 = #20000 1'b0;
	m0 = #10000 1'b1;
	m0 = #10000 1'b0;
	m0 = #20000 1'b1;
	m0 = #20000 1'b0;
end 

// m1
initial
begin
	m1 = 1'b0;
	m1 = #40000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #20000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #20000 1'b0;
	m1 = #30000 1'b1;
	m1 = #10000 1'b0;
	m1 = #30000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #20000 1'b0;
	m1 = #20000 1'b1;
	m1 = #10000 1'b0;
	m1 = #20000 1'b1;
	m1 = #20000 1'b0;
	m1 = #40000 1'b1;
	m1 = #40000 1'b0;
	m1 = #70000 1'b1;
	m1 = #20000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #20000 1'b1;
	m1 = #30000 1'b0;
	m1 = #20000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #50000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #40000 1'b1;
	m1 = #10000 1'b0;
	m1 = #40000 1'b1;
	m1 = #10000 1'b0;
	m1 = #20000 1'b1;
	m1 = #20000 1'b0;
	m1 = #10000 1'b1;
	m1 = #10000 1'b0;
	m1 = #10000 1'b1;
	m1 = #40000 1'b0;
	m1 = #20000 1'b1;
	m1 = #10000 1'b0;
	m1 = #20000 1'b1;
	m1 = #20000 1'b0;
end 

// m2
initial
begin
	m2 = 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #20000 1'b0;
	m2 = #10000 1'b1;
	m2 = #10000 1'b0;
	m2 = #30000 1'b1;
	m2 = #10000 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #20000 1'b0;
	m2 = #20000 1'b1;
	m2 = #20000 1'b0;
	m2 = #50000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #10000 1'b0;
	m2 = #40000 1'b1;
	m2 = #20000 1'b0;
	m2 = #30000 1'b1;
	m2 = #10000 1'b0;
	m2 = #30000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #10000 1'b0;
	m2 = #100000 1'b1;
	m2 = #20000 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #60000 1'b0;
	m2 = #60000 1'b1;
	m2 = #20000 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #10000 1'b0;
	m2 = #20000 1'b1;
	m2 = #10000 1'b0;
	m2 = #10000 1'b1;
	m2 = #50000 1'b0;
	m2 = #10000 1'b1;
	m2 = #20000 1'b0;
	m2 = #10000 1'b1;
end 

// m3
initial
begin
	m3 = 1'b1;
	m3 = #40000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #20000 1'b0;
	m3 = #10000 1'b1;
	m3 = #20000 1'b0;
	m3 = #30000 1'b1;
	m3 = #10000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #10000 1'b0;
	m3 = #50000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #60000 1'b0;
	m3 = #10000 1'b1;
	m3 = #40000 1'b0;
	m3 = #10000 1'b1;
	m3 = #40000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #10000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #30000 1'b1;
	m3 = #10000 1'b0;
	m3 = #10000 1'b1;
	m3 = #40000 1'b0;
	m3 = #20000 1'b1;
	m3 = #10000 1'b0;
	m3 = #30000 1'b1;
	m3 = #10000 1'b0;
	m3 = #30000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #20000 1'b0;
	m3 = #30000 1'b1;
	m3 = #20000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #20000 1'b1;
	m3 = #20000 1'b0;
	m3 = #10000 1'b1;
	m3 = #20000 1'b0;
	m3 = #10000 1'b1;
	m3 = #10000 1'b0;
	m3 = #10000 1'b1;
end 

// s0
always
begin
	s0 = 1'b0;
	s0 = #250000 1'b1;
	#250000;
end 

// s1
always
begin
	s1 = 1'b0;
	s1 = #500000 1'b1;
	#500000;
end 
endmodule

