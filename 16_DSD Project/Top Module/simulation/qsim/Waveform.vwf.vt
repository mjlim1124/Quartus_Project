// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2022 14:48:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          top_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg J;
reg R;
reg S;
reg count_rst;
// wires                                               
wire [4:0] gom_reg;
wire [4:0] mar_reg;
wire [6:0] score;

// assign statements (if any)                          
top_module i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.J(J),
	.R(R),
	.S(S),
	.count_rst(count_rst),
	.gom_reg(gom_reg),
	.mar_reg(mar_reg),
	.score(score)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(16)
	begin
		CLK = 1'b0;
		CLK = #30000 1'b1;
		# 30000;
	end
	CLK = 1'b0;
	CLK = #30000 1'b1;
end 

// S
initial
begin
	S = 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #220000 1'b1;
	S = #20000 1'b0;
	S = #220000 1'b1;
	S = #20000 1'b0;
	S = #220000 1'b1;
	S = #20000 1'b0;
end 

// R
initial
begin
	R = 1'b0;
	R = #80000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #100000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #100000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #100000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
	R = #40000 1'b1;
	R = #20000 1'b0;
end 

// J
initial
begin
	J = 1'b0;
	J = #440000 1'b1;
	J = #20000 1'b0;
	J = #220000 1'b1;
	J = #20000 1'b0;
	J = #220000 1'b1;
	J = #20000 1'b0;
end 

// count_rst
initial
begin
	count_rst = 1'b0;
	count_rst = #740000 1'b1;
	count_rst = #20000 1'b0;
end 
endmodule

