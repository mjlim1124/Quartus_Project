// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/25/2022 11:24:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SftReg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SftReg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [9:0] loadval;
reg mode;
reg preset;
reg serial;
// wires                                               
wire [9:0] q;

// assign statements (if any)                          
SftReg i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.loadval(loadval),
	.mode(mode),
	.preset(preset),
	.q(q),
	.serial(serial)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(23)
	begin
		clk = 1'b0;
		clk = #21250 1'b1;
		# 21250;
	end
	clk = 1'b0;
	clk = #21250 1'b1;
end 

// preset
initial
begin
	preset = 1'b0;
	preset = #370000 1'b1;
	preset = #110000 1'b0;
end 
// loadval[ 9 ]
initial
begin
	loadval[9] = 1'b0;
end 
// loadval[ 8 ]
initial
begin
	loadval[8] = 1'b0;
end 
// loadval[ 7 ]
initial
begin
	loadval[7] = 1'b0;
end 
// loadval[ 6 ]
initial
begin
	loadval[6] = 1'b0;
end 
// loadval[ 5 ]
initial
begin
	loadval[5] = 1'b0;
end 
// loadval[ 4 ]
initial
begin
	loadval[4] = 1'b0;
end 
// loadval[ 3 ]
initial
begin
	loadval[3] = 1'b0;
	loadval[3] = #390000 1'b1;
	loadval[3] = #80000 1'b0;
end 
// loadval[ 2 ]
initial
begin
	loadval[2] = 1'b0;
end 
// loadval[ 1 ]
initial
begin
	loadval[1] = 1'b0;
end 
// loadval[ 0 ]
initial
begin
	loadval[0] = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #860000 1'b1;
	clr = #100000 1'b0;
end 

// mode
initial
begin
	mode = 1'b1;
	mode = #500000 1'b0;
end 

// serial
initial
begin
	serial = 1'b1;
	serial = #40000 1'b0;
	serial = #480000 1'b1;
	serial = #30000 1'b0;
	serial = #210000 1'b1;
end 
endmodule

