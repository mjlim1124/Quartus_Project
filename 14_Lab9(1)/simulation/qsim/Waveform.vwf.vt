// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/16/2022 23:26:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          AsynBinUp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AsynBinUp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg B1;
reg SW0;
reg SW1;
reg SW2;
// wires                                               
wire L1;
wire L2;
wire L3;
wire L4;

// assign statements (if any)                          
AsynBinUp i1 (
// port map - connection between master ports and signals/registers   
	.B1(B1),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.SW0(SW0),
	.SW1(SW1),
	.SW2(SW2)
);
initial 
begin 
#17000000 $finish;
end 

// B1
always
begin
	B1 = 1'b0;
	B1 = #500000 1'b1;
	#500000;
end 

// SW0
initial
begin
	SW0 = 1'b0;
	SW0 = #10000 1'b1;
	SW0 = #6870000 1'b0;
	SW0 = #6240000 1'b1;
end 

// SW1
initial
begin
	SW1 = 1'b1;
end 

// SW2
initial
begin
	SW2 = 1'b1;
end 
endmodule

