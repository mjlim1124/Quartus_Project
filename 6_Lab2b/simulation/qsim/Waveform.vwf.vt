// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2021 07:24:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          add7seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module add7seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg cin;
// wires                                               
wire [0:6] D0;
wire [0:6] D1;
wire [0:6] D2;

// assign statements (if any)                          
add7seg i1 (
// port map - connection between master ports and signals/registers   
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.a(a),
	.b(b),
	.cin(cin)
);
initial 
begin 
#1000000 $stop;
end 

// cin
initial
begin
	cin = 1'b0;
end 

// a[3]
initial
begin
	a[3] = 1'b0;
	a[3] = #437500 1'b1;
	a[3] = #500000 1'b0;
end 

// a[2]
initial
begin
	a[2] = 1'b0;
	a[2] = #187500 1'b1;
	a[2] = #250000 1'b0;
	a[2] = #250000 1'b1;
	a[2] = #250000 1'b0;
end 

// a[1]
initial
begin
	a[1] = 1'b0;
	# 62500;
	repeat(3)
	begin
		a[1] = 1'b1;
		a[1] = #125000 1'b0;
		# 125000;
	end
	a[1] = 1'b1;
	a[1] = #125000 1'b0;
end 

// a[0]
always
begin
	a[0] = 1'b1;
	a[0] = #62500 1'b0;
	#62500;
end 

// b[3]
always
begin
	b[3] = 1'b0;
	b[3] = #500000 1'b1;
	#500000;
end 

// b[2]
always
begin
	b[2] = 1'b0;
	b[2] = #250000 1'b1;
	#250000;
end 

// b[1]
always
begin
	b[1] = 1'b0;
	b[1] = #125000 1'b1;
	#125000;
end 

// b[0]
always
begin
	b[0] = 1'b0;
	b[0] = #62500 1'b1;
	#62500;
end 
endmodule

