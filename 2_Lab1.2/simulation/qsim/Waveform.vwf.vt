// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2021 18:20:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux5to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux5to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg s0;
reg s1;
reg s2;
reg u0;
reg u1;
reg u2;
reg v0;
reg v1;
reg v2;
reg w0;
reg w1;
reg w2;
reg x0;
reg x1;
reg x2;
reg y0;
reg y1;
reg y2;
// wires                                               
wire m0;
wire m1;
wire m2;

// assign statements (if any)                          
Mux5to1 i1 (
// port map - connection between master ports and signals/registers   
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.v0(v0),
	.v1(v1),
	.v2(v2),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.y0(y0),
	.y1(y1),
	.y2(y2)
);
initial 
begin 
#1000000 $finish;
end 

// u0
always
begin
	u0 = 1'b0;
	u0 = #10000 1'b1;
	#10000;
end 

// v0
initial
begin
	v0 = 1'b0;
	v0 = #20000 1'b1;
	v0 = #70000 1'b0;
	v0 = #10000 1'b1;
	v0 = #20000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #20000 1'b0;
	v0 = #20000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #60000 1'b1;
	v0 = #20000 1'b0;
	v0 = #10000 1'b1;
	v0 = #20000 1'b0;
	v0 = #10000 1'b1;
	v0 = #40000 1'b0;
	v0 = #10000 1'b1;
	v0 = #20000 1'b0;
	v0 = #10000 1'b1;
	v0 = #30000 1'b0;
	v0 = #20000 1'b1;
	v0 = #60000 1'b0;
	v0 = #50000 1'b1;
	v0 = #30000 1'b0;
	v0 = #40000 1'b1;
	v0 = #10000 1'b0;
	v0 = #20000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #80000 1'b1;
	v0 = #40000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #10000 1'b0;
	v0 = #20000 1'b1;
	v0 = #10000 1'b0;
	v0 = #10000 1'b1;
	v0 = #40000 1'b0;
	v0 = #10000 1'b1;
end 

// w0
initial
begin
	w0 = 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #10000 1'b0;
	w0 = #20000 1'b1;
	w0 = #30000 1'b0;
	w0 = #10000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #20000 1'b0;
	w0 = #40000 1'b1;
	w0 = #20000 1'b0;
	w0 = #10000 1'b1;
	w0 = #20000 1'b0;
	w0 = #20000 1'b1;
	w0 = #10000 1'b0;
	w0 = #20000 1'b1;
	w0 = #10000 1'b0;
	w0 = #50000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #30000 1'b0;
	w0 = #10000 1'b1;
	w0 = #50000 1'b0;
	w0 = #20000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #20000 1'b0;
	w0 = #20000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #20000 1'b0;
	w0 = #10000 1'b1;
	w0 = #30000 1'b0;
	w0 = #30000 1'b1;
	w0 = #10000 1'b0;
	w0 = #10000 1'b1;
	w0 = #20000 1'b0;
	w0 = #20000 1'b1;
	w0 = #70000 1'b0;
	w0 = #30000 1'b1;
	w0 = #10000 1'b0;
	w0 = #20000 1'b1;
	w0 = #20000 1'b0;
	w0 = #20000 1'b1;
	w0 = #30000 1'b0;
	w0 = #10000 1'b1;
	w0 = #60000 1'b0;
end 

// x0
initial
begin
	x0 = 1'b1;
	# 15000;
	repeat(32)
	begin
		x0 = 1'b0;
		x0 = #15000 1'b1;
		# 15000;
	end
	x0 = 1'b0;
	x0 = #15000 1'b1;
end 

// y0
initial
begin
	y0 = 1'b1;
	# 5000;
	repeat(99)
	begin
		y0 = 1'b0;
		y0 = #5000 1'b1;
		# 5000;
	end
	y0 = 1'b0;
end 

// u1
initial
begin
	u1 = 1'b0;
	u1 = #10000 1'b1;
	u1 = #20000 1'b0;
	u1 = #60000 1'b1;
	u1 = #50000 1'b0;
	u1 = #30000 1'b1;
	u1 = #20000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #60000 1'b1;
	u1 = #20000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #10000 1'b1;
	u1 = #20000 1'b0;
	u1 = #10000 1'b1;
	u1 = #30000 1'b0;
	u1 = #10000 1'b1;
	u1 = #20000 1'b0;
	u1 = #20000 1'b1;
	u1 = #40000 1'b0;
	u1 = #30000 1'b1;
	u1 = #30000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #10000 1'b1;
	u1 = #40000 1'b0;
	u1 = #50000 1'b1;
	u1 = #20000 1'b0;
	u1 = #30000 1'b1;
	u1 = #40000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #40000 1'b1;
	u1 = #20000 1'b0;
	u1 = #10000 1'b1;
	u1 = #50000 1'b0;
	u1 = #10000 1'b1;
	u1 = #20000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #10000 1'b1;
	u1 = #10000 1'b0;
	u1 = #10000 1'b1;
	u1 = #20000 1'b0;
end 

// v1
initial
begin
	repeat(16)
	begin
		v1 = 1'b0;
		v1 = #30000 1'b1;
		# 30000;
	end
	v1 = 1'b0;
	v1 = #30000 1'b1;
end 

// w1
initial
begin
	w1 = 1'b1;
	w1 = #30000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #10000 1'b0;
	w1 = #30000 1'b1;
	w1 = #10000 1'b0;
	w1 = #50000 1'b1;
	w1 = #40000 1'b0;
	w1 = #30000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #30000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #30000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #130000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #20000 1'b0;
	w1 = #20000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #20000 1'b0;
	w1 = #20000 1'b1;
	w1 = #10000 1'b0;
	w1 = #30000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
	w1 = #60000 1'b1;
	w1 = #10000 1'b0;
	w1 = #20000 1'b1;
	w1 = #20000 1'b0;
	w1 = #30000 1'b1;
	w1 = #10000 1'b0;
	w1 = #10000 1'b1;
	w1 = #10000 1'b0;
end 

// x1
initial
begin
	x1 = 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #50000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #10000 1'b1;
	x1 = #50000 1'b0;
	x1 = #30000 1'b1;
	x1 = #30000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #30000 1'b1;
	x1 = #10000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #20000 1'b1;
	x1 = #30000 1'b0;
	x1 = #10000 1'b1;
	x1 = #30000 1'b0;
	x1 = #40000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #50000 1'b1;
	x1 = #10000 1'b0;
	x1 = #100000 1'b1;
	x1 = #20000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #30000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #90000 1'b1;
end 

// y1
initial
begin
	y1 = 1'b0;
	y1 = #10000 1'b1;
	y1 = #30000 1'b0;
	y1 = #30000 1'b1;
	y1 = #30000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #20000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #50000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #20000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #20000 1'b1;
	y1 = #30000 1'b0;
	y1 = #10000 1'b1;
	y1 = #20000 1'b0;
	y1 = #40000 1'b1;
	y1 = #10000 1'b0;
	y1 = #30000 1'b1;
	y1 = #10000 1'b0;
	y1 = #20000 1'b1;
	y1 = #50000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #20000 1'b0;
	y1 = #20000 1'b1;
	y1 = #20000 1'b0;
	y1 = #10000 1'b1;
	y1 = #30000 1'b0;
	y1 = #20000 1'b1;
	y1 = #10000 1'b0;
	y1 = #20000 1'b1;
	y1 = #20000 1'b0;
	y1 = #30000 1'b1;
	y1 = #10000 1'b0;
	y1 = #30000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #20000 1'b0;
	y1 = #20000 1'b1;
	y1 = #20000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #30000 1'b0;
	y1 = #10000 1'b1;
end 

// u2
initial
begin
	u2 = 1'b1;
	u2 = #10000 1'b0;
	u2 = #10000 1'b1;
	u2 = #20000 1'b0;
	u2 = #30000 1'b1;
	u2 = #20000 1'b0;
	u2 = #40000 1'b1;
	u2 = #10000 1'b0;
	u2 = #30000 1'b1;
	u2 = #20000 1'b0;
	u2 = #30000 1'b1;
	u2 = #30000 1'b0;
	u2 = #20000 1'b1;
	u2 = #30000 1'b0;
	u2 = #30000 1'b1;
	u2 = #40000 1'b0;
	u2 = #40000 1'b1;
	u2 = #20000 1'b0;
	u2 = #20000 1'b1;
	u2 = #30000 1'b0;
	u2 = #10000 1'b1;
	u2 = #10000 1'b0;
	u2 = #10000 1'b1;
	u2 = #20000 1'b0;
	u2 = #10000 1'b1;
	u2 = #10000 1'b0;
	u2 = #10000 1'b1;
	u2 = #60000 1'b0;
	u2 = #80000 1'b1;
	u2 = #20000 1'b0;
	u2 = #60000 1'b1;
	u2 = #20000 1'b0;
	u2 = #10000 1'b1;
	u2 = #10000 1'b0;
	u2 = #30000 1'b1;
	u2 = #30000 1'b0;
	u2 = #60000 1'b1;
end 

// v2
initial
begin
	v2 = 1'b1;
	# 20000;
	repeat(24)
	begin
		v2 = 1'b0;
		v2 = #20000 1'b1;
		# 20000;
	end
	v2 = 1'b0;
end 

// w2
initial
begin
	w2 = 1'b0;
	w2 = #20000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #20000 1'b1;
	w2 = #30000 1'b0;
	w2 = #20000 1'b1;
	w2 = #20000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #30000 1'b0;
	w2 = #30000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #30000 1'b1;
	w2 = #20000 1'b0;
	w2 = #30000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #50000 1'b0;
	w2 = #20000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #70000 1'b0;
	w2 = #20000 1'b1;
	w2 = #20000 1'b0;
	w2 = #50000 1'b1;
	w2 = #20000 1'b0;
	w2 = #10000 1'b1;
	w2 = #60000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #10000 1'b1;
	w2 = #10000 1'b0;
	w2 = #20000 1'b1;
	w2 = #60000 1'b0;
	w2 = #30000 1'b1;
	w2 = #20000 1'b0;
end 

// x2
always
begin
	x2 = 1'b0;
	x2 = #5000 1'b1;
	#5000;
end 

// y2
initial
begin
	y2 = 1'b1;
	# 55000;
	repeat(8)
	begin
		y2 = 1'b0;
		y2 = #55000 1'b1;
		# 55000;
	end
	y2 = 1'b0;
	y2 = #55000 1'b1;
end 

// s0
always
begin
	s0 = 1'b0;
	s0 = #62500 1'b1;
	#62500;
end 

// s1
always
begin
	s1 = 1'b0;
	s1 = #125000 1'b1;
	#125000;
end 

// s2
always
begin
	s2 = 1'b0;
	s2 = #250000 1'b1;
	#250000;
end 
endmodule

