// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/16/2022 21:16:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUX2to1x8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX2to1x8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg s;
reg x0;
reg x1;
reg x2;
reg x3;
reg x4;
reg x5;
reg x6;
reg x7;
reg y0;
reg y1;
reg y2;
reg y3;
reg y4;
reg y5;
reg y6;
reg y7;
// wires                                               
wire m0;
wire m1;
wire m2;
wire m3;
wire m4;
wire m5;
wire m6;
wire m7;

// assign statements (if any)                          
MUX2to1x8 i1 (
// port map - connection between master ports and signals/registers   
	.m0(m0),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.m4(m4),
	.m5(m5),
	.m6(m6),
	.m7(m7),
	.s(s),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.y5(y5),
	.y6(y6),
	.y7(y7)
);
initial 
begin 
#1000000 $finish;
end 

// s
always
begin
	s = 1'b0;
	s = #31250 1'b1;
	#31250;
end 

// x0
initial
begin
	x0 = 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #30000 1'b1;
	x0 = #10000 1'b0;
	x0 = #40000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #50000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #20000 1'b0;
	x0 = #30000 1'b1;
	x0 = #50000 1'b0;
	x0 = #20000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #20000 1'b1;
	x0 = #20000 1'b0;
	x0 = #20000 1'b1;
	x0 = #20000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #20000 1'b1;
	x0 = #10000 1'b0;
	x0 = #20000 1'b1;
	x0 = #20000 1'b0;
	x0 = #20000 1'b1;
	x0 = #40000 1'b0;
	x0 = #30000 1'b1;
	x0 = #30000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #20000 1'b1;
	x0 = #20000 1'b0;
	x0 = #10000 1'b1;
	x0 = #20000 1'b0;
	x0 = #20000 1'b1;
	x0 = #20000 1'b0;
	x0 = #10000 1'b1;
	x0 = #50000 1'b0;
	x0 = #10000 1'b1;
	x0 = #20000 1'b0;
	x0 = #10000 1'b1;
	x0 = #10000 1'b0;
	x0 = #10000 1'b1;
	x0 = #30000 1'b0;
	x0 = #10000 1'b1;
end 

// x1
initial
begin
	x1 = 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #50000 1'b1;
	x1 = #10000 1'b0;
	x1 = #70000 1'b1;
	x1 = #10000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #30000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #40000 1'b0;
	x1 = #20000 1'b1;
	x1 = #50000 1'b0;
	x1 = #30000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #20000 1'b0;
	x1 = #40000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #50000 1'b0;
	x1 = #10000 1'b1;
	x1 = #30000 1'b0;
	x1 = #20000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #50000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #40000 1'b0;
	x1 = #30000 1'b1;
	x1 = #30000 1'b0;
	x1 = #10000 1'b1;
	x1 = #30000 1'b0;
	x1 = #10000 1'b1;
	x1 = #10000 1'b0;
	x1 = #10000 1'b1;
	x1 = #30000 1'b0;
end 

// x2
initial
begin
	x2 = 1'b0;
	x2 = #40000 1'b1;
	x2 = #40000 1'b0;
	x2 = #10000 1'b1;
	x2 = #60000 1'b0;
	x2 = #20000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #40000 1'b0;
	x2 = #20000 1'b1;
	x2 = #20000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #20000 1'b1;
	x2 = #20000 1'b0;
	x2 = #20000 1'b1;
	x2 = #30000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #40000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #30000 1'b0;
	x2 = #40000 1'b1;
	x2 = #10000 1'b0;
	x2 = #20000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #20000 1'b0;
	x2 = #10000 1'b1;
	x2 = #50000 1'b0;
	x2 = #20000 1'b1;
	x2 = #40000 1'b0;
	x2 = #10000 1'b1;
	x2 = #30000 1'b0;
	x2 = #20000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #30000 1'b1;
	x2 = #20000 1'b0;
	x2 = #10000 1'b1;
	x2 = #20000 1'b0;
	x2 = #10000 1'b1;
	x2 = #60000 1'b0;
	x2 = #30000 1'b1;
end 

// x3
initial
begin
	x3 = 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #20000 1'b1;
	x3 = #10000 1'b0;
	x3 = #20000 1'b1;
	x3 = #10000 1'b0;
	x3 = #40000 1'b1;
	x3 = #20000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #20000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #10000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #10000 1'b0;
	x3 = #60000 1'b1;
	x3 = #10000 1'b0;
	x3 = #20000 1'b1;
	x3 = #10000 1'b0;
	x3 = #30000 1'b1;
	x3 = #30000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #20000 1'b1;
	x3 = #30000 1'b0;
	x3 = #20000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #30000 1'b1;
	x3 = #20000 1'b0;
	x3 = #10000 1'b1;
	x3 = #20000 1'b0;
	x3 = #30000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #10000 1'b0;
	x3 = #10000 1'b1;
	x3 = #50000 1'b0;
	x3 = #10000 1'b1;
	x3 = #30000 1'b0;
	x3 = #50000 1'b1;
	x3 = #50000 1'b0;
	x3 = #10000 1'b1;
end 

// x4
initial
begin
	x4 = 1'b0;
	x4 = #10000 1'b1;
	x4 = #10000 1'b0;
	x4 = #30000 1'b1;
	x4 = #20000 1'b0;
	x4 = #40000 1'b1;
	x4 = #30000 1'b0;
	x4 = #20000 1'b1;
	x4 = #30000 1'b0;
	x4 = #20000 1'b1;
	x4 = #30000 1'b0;
	x4 = #20000 1'b1;
	x4 = #50000 1'b0;
	x4 = #10000 1'b1;
	x4 = #10000 1'b0;
	x4 = #40000 1'b1;
	x4 = #20000 1'b0;
	x4 = #10000 1'b1;
	x4 = #30000 1'b0;
	x4 = #40000 1'b1;
	x4 = #20000 1'b0;
	x4 = #70000 1'b1;
	x4 = #10000 1'b0;
	x4 = #10000 1'b1;
	x4 = #30000 1'b0;
	x4 = #60000 1'b1;
	x4 = #30000 1'b0;
	x4 = #10000 1'b1;
	x4 = #60000 1'b0;
	x4 = #20000 1'b1;
	x4 = #10000 1'b0;
	x4 = #20000 1'b1;
	x4 = #10000 1'b0;
	x4 = #10000 1'b1;
	x4 = #20000 1'b0;
	x4 = #10000 1'b1;
	x4 = #40000 1'b0;
	x4 = #30000 1'b1;
	x4 = #10000 1'b0;
	x4 = #10000 1'b1;
	x4 = #10000 1'b0;
	x4 = #10000 1'b1;
end 

// x5
initial
begin
	x5 = 1'b1;
	x5 = #40000 1'b0;
	x5 = #60000 1'b1;
	x5 = #10000 1'b0;
	x5 = #20000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #20000 1'b0;
	x5 = #50000 1'b1;
	x5 = #30000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #30000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #40000 1'b0;
	x5 = #10000 1'b1;
	x5 = #20000 1'b0;
	x5 = #20000 1'b1;
	x5 = #40000 1'b0;
	x5 = #10000 1'b1;
	x5 = #20000 1'b0;
	x5 = #20000 1'b1;
	x5 = #20000 1'b0;
	x5 = #10000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #60000 1'b0;
	x5 = #30000 1'b1;
	x5 = #90000 1'b0;
	x5 = #30000 1'b1;
	x5 = #10000 1'b0;
	x5 = #10000 1'b1;
	x5 = #130000 1'b0;
end 

// x6
initial
begin
	x6 = 1'b0;
	x6 = #20000 1'b1;
	x6 = #10000 1'b0;
	x6 = #20000 1'b1;
	x6 = #10000 1'b0;
	x6 = #10000 1'b1;
	x6 = #10000 1'b0;
	x6 = #10000 1'b1;
	x6 = #10000 1'b0;
	x6 = #20000 1'b1;
	x6 = #40000 1'b0;
	x6 = #10000 1'b1;
	x6 = #20000 1'b0;
	x6 = #10000 1'b1;
	x6 = #20000 1'b0;
	x6 = #40000 1'b1;
	x6 = #60000 1'b0;
	x6 = #30000 1'b1;
	x6 = #10000 1'b0;
	x6 = #10000 1'b1;
	x6 = #20000 1'b0;
	x6 = #10000 1'b1;
	x6 = #40000 1'b0;
	x6 = #10000 1'b1;
	x6 = #40000 1'b0;
	x6 = #10000 1'b1;
	x6 = #10000 1'b0;
	x6 = #20000 1'b1;
	x6 = #30000 1'b0;
	x6 = #10000 1'b1;
	x6 = #20000 1'b0;
	x6 = #10000 1'b1;
	x6 = #30000 1'b0;
	x6 = #40000 1'b1;
	x6 = #20000 1'b0;
	x6 = #20000 1'b1;
	x6 = #10000 1'b0;
	x6 = #30000 1'b1;
	x6 = #20000 1'b0;
	x6 = #50000 1'b1;
	x6 = #20000 1'b0;
	x6 = #30000 1'b1;
	x6 = #30000 1'b0;
	x6 = #20000 1'b1;
	x6 = #30000 1'b0;
	x6 = #10000 1'b1;
	x6 = #10000 1'b0;
	x6 = #10000 1'b1;
end 

// x7
initial
begin
	x7 = 1'b1;
	x7 = #10000 1'b0;
	x7 = #20000 1'b1;
	x7 = #30000 1'b0;
	x7 = #40000 1'b1;
	x7 = #20000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #30000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #20000 1'b0;
	x7 = #10000 1'b1;
	x7 = #30000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #40000 1'b1;
	x7 = #20000 1'b0;
	x7 = #20000 1'b1;
	x7 = #30000 1'b0;
	x7 = #60000 1'b1;
	x7 = #10000 1'b0;
	x7 = #20000 1'b1;
	x7 = #20000 1'b0;
	x7 = #10000 1'b1;
	x7 = #20000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #70000 1'b1;
	x7 = #10000 1'b0;
	x7 = #20000 1'b1;
	x7 = #40000 1'b0;
	x7 = #20000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #60000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #20000 1'b0;
	x7 = #20000 1'b1;
	x7 = #10000 1'b0;
	x7 = #10000 1'b1;
	x7 = #20000 1'b0;
	x7 = #10000 1'b1;
	x7 = #10000 1'b0;
	x7 = #40000 1'b1;
end 

// y0
always
begin
	y0 = 1'b0;
	y0 = #62500 1'b1;
	#62500;
end 

// y1
always
begin
	y1 = 1'b0;
	y1 = #125000 1'b1;
	#125000;
end 

// y2
always
begin
	y2 = 1'b0;
	y2 = #250000 1'b1;
	#250000;
end 

// y3
always
begin
	y3 = 1'b0;
	y3 = #500000 1'b1;
	#500000;
end 

// y4
always
begin
	y4 = 1'b0;
	y4 = #62500 1'b1;
	#62500;
end 

// y5
always
begin
	y5 = 1'b0;
	y5 = #125000 1'b1;
	#125000;
end 

// y6
always
begin
	y6 = 1'b0;
	y6 = #250000 1'b1;
	#250000;
end 

// y7
always
begin
	y7 = 1'b0;
	y7 = #500000 1'b1;
	#500000;
end 
endmodule

